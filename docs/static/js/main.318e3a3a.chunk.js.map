{"version":3,"sources":["Zbar/ZbarImage.jsx","Zbar/ZbarScanner.jsx","misc/img-utils.js","Zbar/ZbarWasmClass.js","App.js","reportWebVitals.js","index.js","Zbar/Zbar.module.css"],"names":["moduleExports","_video","wasmCls","importObj","wasi_snapshot_preview1","fd_seek","fd_close","fd_write","fd_read","environ_sizes_get","environ_get","proc_exit","clock_time_get","env","log_char_arr","msg_ptr","size","console","log","memoryOffset","moduleMemory","returnValue","bytes","Uint8Array","buffer","character","i","String","fromCharCode","getStringFromMemory","ZbarImage","props","canvasRef","React","createRef","imgRef","useState","img","setImg","canvas","setCanvas","useEffect","fetch","then","response","arrayBuffer","WebAssembly","instantiate","result","img_buffer_ptr","instance","exports","malloc","data","length","Uint8ClampedArray","BYTES_PER_ELEMENT","rst_buffer_ptr","Uint16Array","memory","set","func_zbar","width","height","code_amt","codes_loc","amt","offset","type","type_len","data_len","info_data_len","x0","y0","x1","y1","push","free","canvas_cb","useCallback","current","src","ref","onLoad","e","window","document","createElement","ctx","getContext","drawImage","getImageData","fetch_imgdata_from_image","target","className","styles","demo_img","ZbarWasmClass","wasm_func","this","frame_buffer_ptr","result_buffer_ptr","bytes_memory","process","bind","rst","points","ZbarScanner","webcamRef","useRef","codes","setCodes","webcam_cb","video","tick","requestAnimationFrame","paused","end","img_data","scale","_width","videoWidth","_height","videoHeight","context","frame_imgdata","fetch_imagedata_from_video","_codes","lineWidth","strokeStyle","beginPath","moveTo","lineTo","stroke","addEventListener","results","pause","srcObject","getTracks","forEach","track","stop","audio","videoConstraints","facingMode","scanner_container","code","map","idx","scanner","App","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","module"],"mappings":"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","file":"static/js/main.318e3a3a.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { fetch_imgdata_from_image, getStringFromMemory } from \"../misc/img-utils.js\";\nimport styles from \"./Zbar.module.css\";\n\nlet moduleExports;\nlet importObj = {\n    wasi_snapshot_preview1: {\n        fd_seek: () => {},\n        fd_close: () => {},\n        fd_write: () => {},\n        fd_read: () => {},\n        environ_sizes_get: () => {},\n        environ_get: () => {},\n        proc_exit: () => {},\n        clock_time_get: () => {},\n    },\n    env: {\n        log_char_arr: (msg_ptr, size) => {\n            console.log(getStringFromMemory(msg_ptr, moduleExports));\n        }\n    }\n};\n\nexport const ZbarImage = (props) => {    \n    const canvasRef = React.createRef();\n    const imgRef = React.createRef();\n\n    const [img, setImg] = useState(null);\n    const [canvas, setCanvas] = useState(null);\n\n    useEffect(() => {\n        if (img && canvas) {\n\n            fetch(\"wasm/zbarapp.wasm\").then(response =>\n                response.arrayBuffer()\n            ).then(bytes =>\n                WebAssembly.instantiate(bytes, importObj)\n            ).then(result => {\n                console.log(result);\n\n                moduleExports = result.instance.exports;\n\n                const img_buffer_ptr = moduleExports.malloc(img.data.length * Uint8ClampedArray.BYTES_PER_ELEMENT);\n                const rst_buffer_ptr = moduleExports.malloc(128 * Uint16Array.BYTES_PER_ELEMENT);\n                const bytes_memory = new Uint8ClampedArray(moduleExports.memory.buffer);\n                bytes_memory.set(img.data, img_buffer_ptr, img_buffer_ptr / Uint8ClampedArray.BYTES_PER_ELEMENT);\n                \n                moduleExports.func_zbar(\n                    img_buffer_ptr,\n                    img.width,\n                    img.height,\n                    rst_buffer_ptr\n                );\n\n                const bytes = new Uint16Array(moduleExports.memory.buffer, rst_buffer_ptr);\n                // console.log(bytes);\n                const code_amt = bytes[0];\n                console.log(\"code_amt: \" + code_amt);\n\n                console.log(\" =========== split code ============\");\n                const codes_loc = [];\n                for (let amt = 0, offset = 1; amt < code_amt; amt++) {\n                    let type = \"\",\n                        data = \"\";\n                    let type_len = bytes[offset];\n                    let data_len = bytes[offset + 1];\n\n                    console.log(\"type_len: \" + type_len);\n                    console.log(\"data_len: \" + data_len);\n\n                    let info_data_len = type_len + data_len;\n                    // console.log(\"info_data_len: \" + info_data_len);\n\n                    for (let i = offset + 2; i < offset + info_data_len + 2; i++) {\n                        if (i < offset + type_len + 2) {\n                            type += String.fromCharCode(bytes[i]);\n                        } else {\n                            data += String.fromCharCode(bytes[i]);\n                        }\n                    }\n                    console.log(\"type is: \" + type);\n                    console.log(\"data is: \" + data);\n\n                    offset += info_data_len + 2;\n                    const x0 = bytes[offset],\n                        y0 = bytes[offset + 1],\n                        x1 = bytes[offset + 2],\n                        y1 = bytes[offset + 3];\n\n                    offset += 4;\n                    console.log(\"offset: \" + offset);\n                    codes_loc.push(\n                        {x0, y0, x1, y1});\n                }                \n\n                moduleExports.free(img_buffer_ptr);\n                moduleExports.free(rst_buffer_ptr);\n            });            \n        }\n    }, [img, canvas]);\n\n    const canvas_cb = useCallback(() => {\n        if (canvasRef) {\n            setCanvas(canvasRef.current);\n        }\n    }, [canvasRef]);\n\n    useEffect(() => {\n        if (canvas_cb) {\n            canvas_cb();\n        }\n    }, [canvas_cb]);\n    return <div>Zbar is working. <br/>\n    <img src=\"assets/images/code4.png\" ref={imgRef} onLoad={e=>{\n        setImg(fetch_imgdata_from_image(e.target));\n    }} className={`${styles.demo_img}`}/>\n    <canvas ref={canvasRef} width={723} height={1112}/>\n    </div>\n}","import React, { useCallback, useEffect, useRef, useState } from \"react\";\nimport styles from \"./Zbar.module.css\";\nimport Webcam from \"react-webcam\";\nimport { fetch_imagedata_from_video } from \"../misc/img-utils\";\nimport ZbarWasmClass from \"./ZbarWasmClass\";\n\nconst importObj = {\n    wasi_snapshot_preview1: {\n        fd_seek: () => { },\n        fd_close: () => { },\n        fd_write: () => { },\n        fd_read: () => { },\n        environ_sizes_get: () => { },\n        environ_get: () => { },\n        proc_exit: () => { },\n        clock_time_get: () => { },\n    },\n    env: {\n        log_char_arr: (msg_ptr, size) => {\n            // console.log(getStringFromMemory(msg_ptr, moduleExports));\n        }\n    }\n};\nconst VIDEO_WIDTH = 400;\nconst VIDEO_HEIGHT = 400;\n\nlet moduleExports;\nlet _video;\nlet wasmCls;\n\nexport const ZbarScanner = (props) => {\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n\n    const [codes, setCodes] = useState([]);\n\n    const webcam_cb = useCallback(() => {\n        const { video } = webcamRef.current;\n        const canvas = canvasRef.current;\n        \n        _video = video;\n\n        const tick = () => {\n            requestAnimationFrame(tick);\n            if (video.paused || video.end) {\n                return;\n            }\n\n            //#region -------- processing image ----------\n            const img_data = fetch_imagedata_from_video(video, canvas, 1);\n            if (img_data) {\n                const _codes = wasmCls.process(img_data.data);\n                if (_codes.length > 0) {\n                    // draw code boundary \n                    for (let i = 0; i < _codes.length; i++) {\n                        const { points: { x0, y0, x1, y1 } } = _codes[i];\n                        const ctx = canvas.getContext(\"2d\");\n                        ctx.lineWidth = 5;\n                        ctx.strokeStyle = \"#FF0000\";\n                        ctx.beginPath();\n                        ctx.moveTo(x0, y0);\n                        ctx.lineTo(x0, y1);\n                        ctx.lineTo(x1, y1);\n                        ctx.lineTo(x1, y0);\n                        ctx.lineTo(x0, y0);\n                        ctx.stroke();\n                    }\n    \n                    setCodes(_codes);\n                }\n            }\n            \n            //#endregion --------- end -------------------\n        };\n\n\n        video.addEventListener('play', () => {\n            fetch('wasm/zbarapp.wasm').then(response =>\n                response.arrayBuffer()\n            ).then(bytes =>\n                WebAssembly.instantiate(bytes, importObj)\n            ).then(results => {\n                // console.log(results);\n                moduleExports = results.instance.exports;\n                wasmCls = new ZbarWasmClass({\n                    instance: moduleExports,\n                    wasm_func: \"func_zbar\",\n                    width: VIDEO_WIDTH,\n                    height: VIDEO_HEIGHT\n                });\n\n                tick();\n            });\n\n\n        }, false);\n\n    }, [webcamRef, canvasRef]);\n\n    useEffect(() => {\n        if (webcam_cb) {\n            webcam_cb();\n        }\n    }, [webcam_cb]);\n\n    useEffect(() => {\n        return () => {\n            if(_video) {                \n                _video.pause();\n                const stream = _video.srcObject;\n                const tracks = stream.getTracks();\n                tracks.forEach(track => track.stop());\n                _video.srcObject = null;\n            }\n            if (wasmCls && moduleExports) {\n                moduleExports.free(wasmCls.frame_buffer_ptr);\n                moduleExports.free(wasmCls.result_buffer_ptr);\n            }\n        }\n    }, []);\n\n    return <>\n        <Webcam audio={false}\n            width={1}\n            height={1}\n            ref={webcamRef}\n            videoConstraints={{\n                width: VIDEO_WIDTH,\n                height: VIDEO_HEIGHT,\n                facingMode: \"environment\"\n            }}\n        />\n        <div className={`container ${styles.scanner_container}`} >\n            <div className=\"row justify-content-md-center\">\n                <div className={`col-6 ${styles.code}`}>\n                    {codes && codes.map((code, idx) => {\n                        return <label key={idx}>{`Barcode: ${code.type} - ${code.data} `}</label>\n                    })}\n                </div>\n            </div>\n            <div className=\"row\" >\n                <div className={`col-12 ${styles.scanner}`}>\n                    <canvas ref={canvasRef} />\n                </div>\n            </div>\n        </div>\n    </>\n}","/**\n * @function\n * @param {HTMLImageElement}: img\n * @return {ImageData}\n*/\nexport const fetch_imgdata_from_image = (img) => {\t\n\tconst {width, height} = img;\n\t// console.log(`${width}-${height}`);\n\tconst canvas = window.document.createElement(\"canvas\");\n\tcanvas.width = width;\n\tcanvas.height = height;\n\tconst ctx = canvas.getContext(\"2d\");\n\tctx.drawImage(img, 0, 0, width, height);\n\treturn ctx.getImageData(0, 0, width, height);\n}\n\n/**\n * @function\n * @param {HTMLVideoElement}: video\n * @param {HTMLCanvasElement}: canvas\n * @param {Number}: scale (0-1)\n*/\nexport const fetch_imagedata_from_video = (video, canvas, scale) => {\n\tconst {videoWidth, videoHeight} = video;  \n\tconst _width = videoWidth * scale, _height = videoHeight * scale;\n\n\tcanvas.width = _width;\n\tcanvas.height = _height;\n\tconst context = canvas.getContext(\"2d\");\n\tcontext.drawImage(video, 0, 0, _width, _height);\n  try {\n    const frame_imgdata = context.getImageData(0, 0, _width, _height);\n    frame_imgdata['context'] = context;\n    return frame_imgdata;\n  } catch(e) {\n    return null;\n  }\n\t\n}\n\nexport function getStringFromMemory(memoryOffset, moduleMemory, size=256) {\n    let returnValue = \"\";    \n    const bytes = new Uint8Array(moduleMemory.buffer, memoryOffset, size);\n\n    let character = \"\";\n    for (let i = 0; i < size; i++) {\n        character = String.fromCharCode(bytes[i]);\n        if (character === \"\\0\") { break; }\n\n        returnValue += character;\n    }\n\n    return returnValue;\n}\n\nexport function convertDataURIToBinary(dataURI) {    \n    var raw = window.atob(dataURI);\n    var rawLength = raw.length;\n    var array = new Uint8Array(new ArrayBuffer(rawLength));\n  \n    for(let i = 0; i < rawLength; i++) {\n      array[i] = raw.charCodeAt(i);\n    }\n    return array;\n  }","export default class ZbarWasmClass {\n    constructor(props) {\n        const { instance, wasm_func, width, height } = props;\n        this.instance = instance;\n        this.width = width;\n        this.height = height;\n        this.frame_buffer_ptr = instance.malloc(width * height * 4 * Uint8Array.BYTES_PER_ELEMENT);\n        this.result_buffer_ptr = instance.malloc(128 * Uint16Array.BYTES_PER_ELEMENT);\n        this.bytes_memory = new Uint8Array(this.instance.memory.buffer);\n\n        this.wasm_func = instance[wasm_func];\n\n        this.process = this.process.bind(this);\n    }\n\n    process(data) {\n        // console.log(data.length);\n        this.bytes_memory.set(\n            data,\n            this.frame_buffer_ptr,\n            this.frame_buffer_ptr / Uint8Array.BYTES_PER_ELEMENT\n        );        \n\n        this.wasm_func(\n            this.frame_buffer_ptr, \n            this.width, \n            this.height,\n            this.result_buffer_ptr);\n        const bytes = new Uint16Array(this.instance.memory.buffer, this.result_buffer_ptr);        \n        const code_amt = bytes[0];\n        \n        const rst = [];\n        const info_digit = 2;\n        \n        if (code_amt > 0) {\n            // console.log(\"code_amt: \" + code_amt);\n            // console.log(bytes);\n            for (let i = 0, offset = 1; i < code_amt; i++) {\n                let type = \"\", data = \"\";\n                let type_len = bytes[offset];\n                let data_len = bytes[offset + 1];\n\n                let info_data_len = type_len + data_len;\n                // console.log(\"info_data_len: \" + info_data_len);\n\n                for (let i = offset + info_digit; i < offset + info_data_len + info_digit; i++) {\n                    if (i < offset + type_len + info_digit) {\n                        type += String.fromCharCode(bytes[i]);\n                    } else {\n                        data += String.fromCharCode(bytes[i]);\n                    }\n                }\n                \n                offset += info_data_len + info_digit;\n                rst.push({ type: type, data: data, points: \n                    {x0: bytes[offset], y0: bytes[offset + 1], \n                        x1: bytes[offset + 2], y1: bytes[offset + 3]},\n                    });\n                offset += 4;\n            }\n        }\n        return rst;\n\n    }\n}","import { HashRouter as Router, Route } from \"react-router-dom\";\nimport {ZbarImage} from \"./Zbar/ZbarImage.jsx\";\nimport { ZbarScanner } from \"./Zbar/ZbarScanner.jsx\";\n\nfunction App() {\n  return (\n    <div>\n      <Router>    \n        <Route exact path=\"/\" component={ZbarScanner} />\n        <Route path=\"/zbar\" component={ZbarImage} /> \n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scanner_container\":\"Zbar_scanner_container__Fc3zg\",\"scanner\":\"Zbar_scanner__2oDxN\",\"code\":\"Zbar_code__1sDyJ\",\"demo_img\":\"Zbar_demo_img__2BtJ4\"};"],"sourceRoot":""}